[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.coverage.report]
exclude_lines = ["if TYPE_CHECKING:"]

[tool.coverage.run]
relative_files = true
source = ["src/cerbottana"]


[tool.mypy]
strict = true
implicit_reexport = true

# Disallow dynamic typing
disallow_any_unimported = true
#disallow_any_expr = true
#disallow_any_decorated = true
disallow_any_explicit = true

show_error_codes = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_any_explicit = false
disallow_untyped_defs = false
disallow_incomplete_defs = false


[tool.poe.tasks]
ruff-fix = "ruff check src tests --fix-only"
ruff-format = "ruff format src tests"
format = ["ruff-fix", "ruff-format"]

darglint = "darglint src tests -v 2"
mypy = "mypy src tests"
ruff = "ruff check src tests"
pytest-full = [
    {ref="pytest"},
    {shell="""
        dotenv get TESTS_MOD_USERNAME > /dev/null
        if [ $? -ne 0 ]
        then
            echo 'Skipping tests using a real Showdown instance'
        else
            poe pytest-real-ps-instance
        fi
    """},
]
pytest = "pytest -m 'not real_ps_instance'"
pytest-real-ps-instance = "pytest -m 'real_ps_instance'"
all = ["format", "darglint", "mypy", "ruff", "pytest-full"]


[tool.poetry]
name = "cerbottana"
version = "0.1.0"
description = ""
authors = ["Parnassius <Parnassius@users.noreply.github.com>"]

[tool.poetry.dependencies]
python = "^3.13"
aiohttp = "3.11.11"
domify = "0.4.5"
imageprobe = "0.3.0"
pokedex = {git="https://github.com/Parnassius/pokedex.git", extras=["asyncio"]}
python-dateutil = "2.9.0.post0"
sqlalchemy = "2.0.36"
typenv = "0.2.0"

[tool.poetry.group.dev.dependencies]
darglint = "1.8.1"
freezegun = "1.5.1"
mypy = "1.14.1"
poethepoet = "0.32.0"
pytest = "8.3.4"
pytest-asyncio = "0.25.0"
pytest-cov = "6.0.0"
pytest-mock = "3.14.0"
pytest-xprocess = "1.0.2"
python-dotenv = {version="1.0.1", extras=["cli"]}
ruff = "0.8.4"
types-python-dateutil = "2.9.0.20241206"

[tool.poetry.scripts]
cerbottana = "cerbottana.__main__:main"


[tool.ruff]
target-version = "py313"

[tool.ruff.lint]
select = [
    "A",     # flake8-builtins
    "ARG",   # flake8-unused-arguments
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle
    "EM",    # flake8-errmsg
    "F",     # pyflakes
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "PGH",   # pygrep-hooks
    "PTH",   # flake8-use-pathlib
    "RET",   # flake8-return
    "RUF",   # Ruff-specific rules
    "T10",   # flake8-debugger
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle
    "YTT",   # flake8-2020
]
ignore = [
    "A003",  # builtin-attribute-shadowing
]
fixable = [
    "I",     # isort
    "F401",  # unused-import
    "TID",   # flake8-tidy-imports
    "UP",    # pyupgrade
]
dummy-variable-rgx = "^_$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG001"]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "cerbottana.typedefs.RoomId",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
split-on-trailing-comma = false


[tool.pytest.ini_options]
addopts = "--strict-config --strict-markers"
markers = ["real_ps_instance"]
asyncio_mode = "auto"
xfail_strict = true
