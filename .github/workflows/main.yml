name: main

on:
  push:
  pull_request:
  schedule:
    - cron: '0 6 * * 6'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HAS_SECRETS: ${{ secrets.TESTS_BOT_USERNAME != '' }}
    outputs:
      coverage-percentage: ${{ steps.percentage.outputs.percentage }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: pipx install poetry
      - name: Set up python 3.12
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "poetry"
      - name: Set up node
        uses: actions/setup-node@v4
      - name: Cache veekun database
        uses: actions/cache@v4
        with:
          path: veekun.sqlite
          key: veekun-${{ hashFiles('cerbottana/data/veekun/*.csv', 'cerbottana/databases/veekun.py', 'cerbottana/tasks/veekun.py') }}
      - name: Cache pokedex database
        uses: actions/cache@v4
        with:
          path: pokedex.sqlite
          key: pokedex-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            pokedex-
      - name: Cache pokemon-showdown instance
        uses: actions/cache@v4
        with:
          path: pokemon-showdown
          key: pokemon-showdown-${{ github.run_id }}
          restore-keys: |
            pokemon-showdown-
      - name: Install dependencies on a cache miss
        if: steps.setup-python.outputs.cache-hit != 'true'
        run: poetry install --sync
      - name: Check formatting with black
        if: github.event_name != 'schedule'
        run: poetry run poe black --check
      - name: Check docstrings with darglint
        if: github.event_name != 'schedule'
        run: poetry run poe darglint
      - name: Type check with mypy
        if: github.event_name != 'schedule'
        run: poetry run poe mypy
      - name: Lint with ruff
        if: github.event_name != 'schedule'
        run: poetry run poe ruff
      - name: Test with pytest
        if: github.event_name != 'schedule'
        run: poetry run poe pytest --cov
      - name: Output coverage percentage
        if: github.event_name != 'schedule'
        id: percentage
        run: |
          poetry run coverage json
          echo "percentage=$(jq '.totals.percent_covered_display' coverage.json)" >> $GITHUB_OUTPUT
      - name: Save coverage report
        if: github.event_name != 'schedule'
        run: poetry run coverage report --format=markdown >> $GITHUB_STEP_SUMMARY
      - name: Test with pytest (integration)
        if: env.HAS_SECRETS == 'true'
        env:
          USERNAME: ${{ secrets.TESTS_BOT_USERNAME }}
          PASSWORD: ${{ secrets.TESTS_BOT_PASSWORD }}
          TESTS_MOD_USERNAME: ${{ secrets.TESTS_MOD_USERNAME }}
          TESTS_MOD_PASSWORD: ${{ secrets.TESTS_MOD_PASSWORD }}
        run: poetry run poe pytest-real-ps-instance

  coverage-badge:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref_name == 'main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: "coverage-badge"
      - name: Calculate badge color
        id: color
        run: |
          echo "color=$(python3 -Ic 'print(
            min(
              (percentage, color)
              for percentage, color in [
                (100, "brightgreen"),
                (90, "green"),
                (70, "yellowgreen"),
                (50, "yellow"),
                (30, "orange"),
                (0, "red"),
              ]
              if percentage >= int(${{ needs.build.outputs.coverage-percentage }})
            )[1]
          )')" >> $GITHUB_OUTPUT
      - name: Update JSON file
        run: |
          jq -n \
            --argjson schemaVersion 1 \
            --arg label coverage \
            --arg message ${{ needs.build.outputs.coverage-percentage }}% \
            --arg color ${{ steps.color.outputs.color }} \
            '$ARGS.named' > coverage-badge.json
      - name: Create commit
        run: |
          git config user.name 'prns'
          git config user.email '77806190+prnss@users.noreply.github.com'
          git commit -am "Update coverage" && git push || true
