name: main

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HAS_SECRETS: ${{ secrets.TESTS_BOT_USERNAME != '' }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up python 3.10
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Set up node
        uses: actions/setup-node@v2
      - name: Cache Poetry virtualenv
        id: virtualenv-cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: poetry-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: poetry-${{ steps.setup-python.outputs.python-version }}-
      - name: Cache veekun database
        id: veekun-cache
        uses: actions/cache@v2
        with:
          path: veekun.sqlite
          key: veekun-${{ hashFiles('cerbottana/data/veekun/*.csv', 'cerbottana/databases/veekun.py', 'cerbottana/tasks/veekun.py') }}
      - name: Cache pokemon-showdown instance
        uses: actions/cache@v2
        with:
          path: pokemon-showdown
          key: pokemon-showdown
      - name: Install Poetry
        run: pipx install poetry
      - name: Setup the virtual environment
        run: |
          poetry config --local virtualenvs.in-project true
          poetry env use "$(which python)"
      - name: Install dependencies on a cache miss
        if: steps.virtualenv-cache.outputs.cache-hit != 'true'
        run: poetry install --remove-untracked
      - name: Mark the veekun database as up-to-date on a cache hit
        if: steps.veekun-cache.outputs.cache-hit == 'true'
        run: sqlite3 veekun.sqlite "UPDATE latest_commit SET commit_id = '$GITHUB_SHA';"
      - name: Check import order
        run: poetry run poe isort-check
      - name: Check formatting using black
        run: poetry run poe black-check
      - name: Check docstrings with darglint
        run: poetry run poe darglint
      - name: Test with mypy
        run: poetry run poe mypy
      - name: Test with pylint
        run: poetry run poe pylint
      - name: Test with pytest
        run: poetry run poe pytest --cov --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
      - name: Test with pytest (integration)
        if: env.HAS_SECRETS == 'true'
        env:
          USERNAME: ${{ secrets.TESTS_BOT_USERNAME }}
          PASSWORD: ${{ secrets.TESTS_BOT_PASSWORD }}
          TESTS_MOD_USERNAME: ${{ secrets.TESTS_MOD_USERNAME }}
          TESTS_MOD_PASSWORD: ${{ secrets.TESTS_MOD_PASSWORD }}
        run: poetry run poe pytest-real-ps-instance
